{"version":3,"sources":["webpack://25-plus-5-clock/./src/react/view/BreakLenght.js","webpack://25-plus-5-clock/./src/react/view/SessionLenght.js","webpack://25-plus-5-clock/./src/react/view/StartButton.js","webpack://25-plus-5-clock/./src/react/view/ReasetButton.js","webpack://25-plus-5-clock/./src/react/view/TimerScreen.js","webpack://25-plus-5-clock/./src/react/model/playAudio.js","webpack://25-plus-5-clock/./src/react/model/numberConvertor.js","webpack://25-plus-5-clock/./src/react/model/initialState.js","webpack://25-plus-5-clock/./src/react/model/reducer.js","webpack://25-plus-5-clock/./src/react/App.js","webpack://25-plus-5-clock/./src/index.js"],"names":["breakLength","timerState","updateTimerLength","useState","breakVal","setBreackVal","useEffect","className","id","type","name","value","disabled","onClick","sessionLength","sessionVal","setSessionVal","setTimerState","reset","min","sec","timerLength","playAudio","play","audio","document","getElementById","currentTime","pause","numberConvertor","n","String","initialState","reducer","state","action","incrememnt","Number","decrement","playload","console","log","sum","useReducer","dispatch","currentTimerMin","setCurrentTimerMin","currentTimerSec","setcurrentTimerSec","countdown","useRef","countdownValue","minVal","minutes","prevMin","current","setInterval","prevSec","seconds","clearInterval","length","e","preventDefault","symbol","target","preload","src","render"],"mappings":"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","file":"main.989ae68514932ee172e1.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst BreakLenght = ({ breakLength, timerState, updateTimerLength }) => {\n  const [breakVal, setBreackVal] = useState(breakLength);\n\n  // ***********************************\n\n  // Set changed Breake val from Breake status and update UI\n  useEffect(() => {\n    setBreackVal(breakLength);\n  }, [breakLength]);\n\n  // ***********************************\n\n  return (\n    <div className=\"timer-controller__lenght\">\n      <h3 id=\"break-label\" className=\"timer-controller__name\">\n        Break Length\n      </h3>\n      <div id=\"break-length\" className=\"timer-controller__screen\">\n        {breakVal}\n      </div>\n      <div className=\"timer-controller__buttons\">\n        <input\n          id=\"break-increment\"\n          className=\"button button_increment\"\n          type=\"button\"\n          name=\"break-increment\"\n          value=\"+\"\n          disabled={timerState === \"stop\" ? true : false}\n          onClick={updateTimerLength}\n        />\n        <input\n          id=\"break-decrement\"\n          className=\"button button_decrement\"\n          type=\"button\"\n          name=\"break-decrement\"\n          value=\"-\"\n          disabled={timerState === \"stop\" ? true : false}\n          onClick={updateTimerLength}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default BreakLenght;\n\n// ********************************************\n","import React, { useState, useEffect } from \"react\";\n\nconst SessionLenght = ({ sessionLength, timerState, updateTimerLength }) => {\n  const [sessionVal, setSessionVal] = useState(sessionLength);\n\n  useEffect(() => {\n    setSessionVal(sessionLength);\n  }, [sessionLength]);\n\n  return (\n    <div className=\"timer-controller__lenght\">\n      <h3 id=\"session-label\" className=\"timer-controller__name\">\n        Session Length\n      </h3>\n\n      <div id=\"session-length\" className=\"timer-controller__screen\">\n        {sessionVal}\n      </div>\n\n      <div className=\"timer-controller__buttons\">\n        <input\n          id=\"session-increment\"\n          className=\"button button_increment\"\n          type=\"button\"\n          name=\"session-increment\"\n          value=\"+\"\n          disabled={timerState === \"stop\" ? true : false}\n          onClick={updateTimerLength}\n        />\n        <input\n          id=\"session-decrement\"\n          className=\"button button_decrement\"\n          type=\"button\"\n          name=\"session-decrement\"\n          value=\"-\"\n          disabled={timerState === \"stop\" ? true : false}\n          onClick={updateTimerLength}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default SessionLenght;\n\n// ********************************************\n","import React from \"react\";\n\nconst StartButton = ({ timerState, setTimerState }) => {\n  return (\n    <button\n      id=\"start_stop\"\n      type=\"button\"\n      className={`button button_start ${timerState === \"stop\" ? \"stop\" : \"\"}`}\n      onClick={() => setTimerState(timerState === \"start\" ? \"stop\" : \"start\")}\n    >\n      {timerState}\n    </button>\n  );\n};\n\nexport default StartButton;\n","import React from \"react\";\n\nconst Reset = ({ reset }) => {\n  return (\n    <>\n      <button\n        id=\"reset\"\n        type=\"button\"\n        className=\"button button_reset\"\n        onClick={reset}\n      >\n        reset\n      </button>\n    </>\n  );\n};\n\nexport default Reset;\n","import React from \"react\";\n\nconst TimerScreen = ({ min, sec, timerLength }) => {\n  return (\n    <main className=\"screen\">\n      <h1 id=\"time-left\" className=\"screen__timer\">\n        {`${min}:${sec}`}\n      </h1>\n      <h2 id=\"timer-label\" className=\"screen__timer-state\">\n        {timerLength}\n      </h2>\n    </main>\n  );\n};\n\nexport default TimerScreen;\n","export const playAudio = (play) => {\n    let audio = document.getElementById(\"beep\");\n  \n    if (play) {\n      audio.play();\n      audio.currentTime = 0;\n    } else {\n      audio.pause();\n      audio.currentTime = 0;\n    }\n  };\n  ","export const numberConvertor = (n) => {\n    if (n < 10) {\n      n = 0 + String(n);\n    }\n    return String(n);\n  };\n  ","export const initialState = {\n    breakLength: \"5\",\n    sessionLength: \"25\",\n    timerState: \"start\",\n    timerLength: \"Session\"\n  };\n  ","import { initialState } from \"./initialState\";\n\nconst BREAKE_INC = \"BREAKE_INC\";\nconst BREAKE_DEC = \"BREAKE_DEC\";\nconst SESSION_INC = \"SESSION_INC\";\nconst SESSION_DEC = \"SESSION_DEC\";\nconst TIMER_START = \"TIMER_START\";\nconst TIMER_STOP = \"TIMER_STOP\";\nconst TIMER_SESSION = \"TIMER_SESSION\";\nconst TIMER_BREAK = \"TIMER_BREAK\";\nconst RESET = \"RESET\";\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case BREAKE_INC:\n      return { ...state, breakLength: incrememnt(Number(state.breakLength)) };\n\n    case BREAKE_DEC:\n      return { ...state, breakLength: decrement(Number(state.breakLength)) };\n\n    case SESSION_INC:\n      return {\n        ...state,\n        sessionLength: incrememnt(Number(state.sessionLength))\n      };\n\n    case SESSION_DEC:\n      return {\n        ...state,\n        sessionLength: decrement(Number(state.sessionLength))\n      };\n\n    case TIMER_START:\n      return { ...state, timerState: action.playload };\n\n    case TIMER_STOP:\n      return { ...state, timerState: action.playload };\n\n    case TIMER_SESSION:\n      return { ...state, timerLength: action.playload };\n\n    case TIMER_BREAK:\n      console.log(\"reduce\", action.playload);\n      return { ...state, timerLength: action.playload };\n\n    case RESET:\n      return { ...initialState };\n\n    default:\n      return state;\n  }\n};\n\nconst incrememnt = (sum) => {\n  if (sum < 60) {\n    return String(sum + 1);\n  } else {\n    return String(sum);\n  }\n};\n\nconst decrement = (sum) => {\n  if (sum > 1) {\n    return String(sum - 1);\n  } else {\n    return String(sum);\n  }\n};\n","import React, { useEffect, useState, useReducer, useRef } from \"react\";\n\n// Components:\nimport BreakLength from \"./view/BreakLenght.js\";\nimport SessionLength from \"./view/SessionLenght.js\";\nimport StartButton from \"./view/StartButton.js\";\nimport ResetButton from \"./view/ReasetButton.js\";\nimport TimerScreen from \"./view/TimerScreen.js\";\n\n// Model:\nimport { playAudio } from \"./model/playAudio.js\";\nimport { numberConvertor } from \"./model/numberConvertor.js\";\n// State:\nimport { initialState } from \"./model/initialState.js\";\nimport { reducer } from \"./model/reducer.js\";\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const [currentTimerMin, setCurrentTimerMin] = useState(state.sessionLength);\n  const [currentTimerSec, setcurrentTimerSec] = useState(\"00\");\n\n  const countdown = useRef();\n  // **********************************************************\n\n  // Start/Stop Timer\n  const timerState = (state) => {\n    if (state === \"start\") {\n      return dispatch({\n        type: \"TIMER_START\",\n        playload: \"start\"\n      });\n    }\n\n    if (state === \"stop\") {\n      return dispatch({\n        type: \"TIMER_STOP\",\n        playload: \"stop\"\n      });\n    }\n  };\n\n  // Switch between Break and Session Length:\n  const updateTimerLength = () => {\n    const length = state.timerLength === \"Session\" ? \"Break\" : \"Session\";\n\n    if (length === \"Session\") {\n      countdownValue(state.sessionLength);\n\n      return dispatch({\n        type: \"TIMER_SESSION\",\n        playload: \"Session\"\n      });\n    }\n\n    if (length === \"Break\") {\n      countdownValue(state.breakLength);\n\n      return dispatch({\n        type: \"TIMER_BREAK\",\n        playload: \"Break\"\n      });\n    }\n  };\n\n  // Update Session & Break length values:\n  const updateSession = (e) => {\n    e.preventDefault();\n    const symbol = e.target.value;\n\n    if (symbol === \"+\") {\n      return dispatch({\n        type: \"SESSION_INC\"\n      });\n    } else {\n      return dispatch({\n        type: \"SESSION_DEC\"\n      });\n    }\n  };\n\n  const updateBreak = (e) => {\n    e.preventDefault();\n    const symbol = e.target.value;\n\n    if (symbol === \"+\") {\n      return dispatch({\n        type: \"BREAKE_INC\"\n      });\n    } else {\n      return dispatch({\n        type: \"BREAKE_DEC\"\n      });\n    }\n  };\n\n  // Reset:\n  const reset = () => {\n    playAudio(false);\n    countdownValue(state.sessionLength);\n\n    return dispatch({\n      type: \"RESET\"\n    });\n  };\n  // *****************************************\n\n  const countdownValue = (minVal) => {\n    const minutes = numberConvertor(Number(minVal));\n\n    setCurrentTimerMin(minutes);\n    setcurrentTimerSec(\"00\");\n  };\n\n  // *****************************************\n\n  // Consumes Minutes:\n  useEffect(() => {\n    setCurrentTimerMin((prevMin) => {\n      let minutes = Number(prevMin);\n      if (currentTimerSec === \"59\" && minutes > 0) {\n        minutes -= 1;\n      }\n\n      return numberConvertor(minutes);\n    });\n  }, [currentTimerSec]);\n\n  // Consumes Seconds:\n  useEffect(() => {\n    // run timer\n    if (state.timerState === \"stop\") {\n      countdown.current = setInterval(() => {\n        setcurrentTimerSec((prevSec) => {\n          let seconds = Number(prevSec);\n          if (seconds === 0) {\n            return \"59\";\n          } else if (seconds > 0) {\n            seconds -= 1;\n          }\n\n          return numberConvertor(seconds);\n        });\n      }, 1000);\n    }\n\n    return () => clearInterval(countdown.current);\n  }, [state.timerState]);\n\n  // Change Timer Status:\n  useEffect(() => {\n    if (currentTimerMin === \"00\" && currentTimerSec === \"00\") {\n      playAudio(true);\n      updateTimerLength();\n    }\n  }, [currentTimerMin, currentTimerSec]);\n\n  useEffect(() => {\n    if (state.timerLength === \"Session\") {\n      countdownValue(state.sessionLength);\n    }\n\n    if (state.timerLength === \"Break\") {\n      countdownValue(state.breakLength);\n    }\n  }, [state.sessionLength, state.breakLength, state.timerLength]);\n\n  return (\n    <>\n      \n\n      <header className=\"controll-panel\">\n        <h1 className=\"logo\">25 + 5 Clock</h1>\n\n        <StartButton timerState={state.timerState} setTimerState={timerState} />\n\n        <nav className=\"length-constollers timer-controller\">\n            <BreakLength\n                breakLength={state.breakLength}\n                timerState={state.timerState}\n                updateTimerLength={updateBreak}\n            />\n            <ResetButton reset={reset} />\n            <SessionLength\n                sessionLength={state.sessionLength}\n                timerState={state.timerState}\n                updateTimerLength={updateSession}\n            />\n        </nav>\n      </header>\n      <TimerScreen\n        min={currentTimerMin}\n        sec={currentTimerSec}\n        timerLength={state.timerLength}\n      />\n      <audio\n        id=\"beep\"\n        preload=\"auto\"\n        src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"\n      />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport reander, { render } from 'react-dom';\n\n\n/* Styles */\nimport './sass/main.scss';\n\n/* React Component */\nimport App from './react/App.js';\n\nrender(\n    <App />,\n    document.getElementById('root')\n);"],"sourceRoot":""}